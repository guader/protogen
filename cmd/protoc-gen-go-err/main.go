package main

import (
	"google.golang.org/protobuf/compiler/protogen"
)

func main() {
	protogen.Options{}.Run(generate)
}

func generate(plugin *protogen.Plugin) error {
	for _, file := range plugin.Files {
		if !file.Generate {
			continue
		}

		g := plugin.NewGeneratedFile(file.GeneratedFilenamePrefix+".err.go", file.GoImportPath)
		g.P("// Code generated by protoc-gen-go-err. DO NOT EDIT.")
		g.P("package ", file.GoPackageName)
		g.P()
		g.P("import (")
		g.P(`codes "google.golang.org/grpc/codes"`)
		g.P(`status "google.golang.org/grpc/status"`)
		g.P(")")
		g.P()

		for _, enum := range file.Enums {
			// implement error interface
			g.P("func (x ", enum.Desc.Name(), ") Error() string {")
			g.P("return x.String()")
			g.P("}")
			g.P()
			// grpc codes and status
			g.P("func (x ", enum.Desc.Name(), ") Err() error {")
			g.P("return status.Error(codes.Code(x), x.Error())")
			g.P("}")
			g.P()
			g.P("func (x ", enum.Desc.Name(), ") ErrWithMsg(msg string) error {")
			g.P("return status.Error(codes.Code(x), msg)")
			g.P("}")
			g.P()
		}
	}
	return nil
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.23.3
// source: validator/validator.proto

package validator

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FileOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable *bool   `protobuf:"varint,1,opt,name=enable" json:"enable,omitempty"`
	Suffix *string `protobuf:"bytes,2,opt,name=suffix" json:"suffix,omitempty"`
}

func (x *FileOptions) Reset() {
	*x = FileOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validator_validator_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileOptions) ProtoMessage() {}

func (x *FileOptions) ProtoReflect() protoreflect.Message {
	mi := &file_validator_validator_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileOptions.ProtoReflect.Descriptor instead.
func (*FileOptions) Descriptor() ([]byte, []int) {
	return file_validator_validator_proto_rawDescGZIP(), []int{0}
}

func (x *FileOptions) GetEnable() bool {
	if x != nil && x.Enable != nil {
		return *x.Enable
	}
	return false
}

func (x *FileOptions) GetSuffix() string {
	if x != nil && x.Suffix != nil {
		return *x.Suffix
	}
	return ""
}

type FieldRules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*FieldRules_Bool
	//	*FieldRules_Enum
	//	*FieldRules_Int32
	//	*FieldRules_Uint32
	//	*FieldRules_Int64
	//	*FieldRules_Uint64
	//	*FieldRules_Float
	//	*FieldRules_Double
	//	*FieldRules_String_
	//	*FieldRules_Bytes
	//	*FieldRules_Message
	Type     isFieldRules_Type   `protobuf_oneof:"type"`
	Repeated *FieldRulesRepeated `protobuf:"bytes,31,opt,name=repeated" json:"repeated,omitempty"`
}

func (x *FieldRules) Reset() {
	*x = FieldRules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validator_validator_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldRules) ProtoMessage() {}

func (x *FieldRules) ProtoReflect() protoreflect.Message {
	mi := &file_validator_validator_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldRules.ProtoReflect.Descriptor instead.
func (*FieldRules) Descriptor() ([]byte, []int) {
	return file_validator_validator_proto_rawDescGZIP(), []int{1}
}

func (m *FieldRules) GetType() isFieldRules_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *FieldRules) GetBool() *FieldRulesBool {
	if x, ok := x.GetType().(*FieldRules_Bool); ok {
		return x.Bool
	}
	return nil
}

func (x *FieldRules) GetEnum() *FieldRulesEnum {
	if x, ok := x.GetType().(*FieldRules_Enum); ok {
		return x.Enum
	}
	return nil
}

func (x *FieldRules) GetInt32() *FieldRulesInt32 {
	if x, ok := x.GetType().(*FieldRules_Int32); ok {
		return x.Int32
	}
	return nil
}

func (x *FieldRules) GetUint32() *FieldRulesUint32 {
	if x, ok := x.GetType().(*FieldRules_Uint32); ok {
		return x.Uint32
	}
	return nil
}

func (x *FieldRules) GetInt64() *FieldRulesInt64 {
	if x, ok := x.GetType().(*FieldRules_Int64); ok {
		return x.Int64
	}
	return nil
}

func (x *FieldRules) GetUint64() *FieldRulesUint64 {
	if x, ok := x.GetType().(*FieldRules_Uint64); ok {
		return x.Uint64
	}
	return nil
}

func (x *FieldRules) GetFloat() *FieldRulesFloat {
	if x, ok := x.GetType().(*FieldRules_Float); ok {
		return x.Float
	}
	return nil
}

func (x *FieldRules) GetDouble() *FieldRulesDouble {
	if x, ok := x.GetType().(*FieldRules_Double); ok {
		return x.Double
	}
	return nil
}

func (x *FieldRules) GetString_() *FieldRulesString {
	if x, ok := x.GetType().(*FieldRules_String_); ok {
		return x.String_
	}
	return nil
}

func (x *FieldRules) GetBytes() *FieldRulesBytes {
	if x, ok := x.GetType().(*FieldRules_Bytes); ok {
		return x.Bytes
	}
	return nil
}

func (x *FieldRules) GetMessage() *FieldRulesMessage {
	if x, ok := x.GetType().(*FieldRules_Message); ok {
		return x.Message
	}
	return nil
}

func (x *FieldRules) GetRepeated() *FieldRulesRepeated {
	if x != nil {
		return x.Repeated
	}
	return nil
}

type isFieldRules_Type interface {
	isFieldRules_Type()
}

type FieldRules_Bool struct {
	Bool *FieldRulesBool `protobuf:"bytes,1,opt,name=bool,oneof"`
}

type FieldRules_Enum struct {
	Enum *FieldRulesEnum `protobuf:"bytes,2,opt,name=enum,oneof"`
}

type FieldRules_Int32 struct {
	Int32 *FieldRulesInt32 `protobuf:"bytes,3,opt,name=int32,oneof"`
}

type FieldRules_Uint32 struct {
	Uint32 *FieldRulesUint32 `protobuf:"bytes,5,opt,name=uint32,oneof"`
}

type FieldRules_Int64 struct {
	Int64 *FieldRulesInt64 `protobuf:"bytes,6,opt,name=int64,oneof"`
}

type FieldRules_Uint64 struct {
	Uint64 *FieldRulesUint64 `protobuf:"bytes,8,opt,name=uint64,oneof"`
}

type FieldRules_Float struct {
	Float *FieldRulesFloat `protobuf:"bytes,11,opt,name=float,oneof"`
}

type FieldRules_Double struct {
	Double *FieldRulesDouble `protobuf:"bytes,14,opt,name=double,oneof"`
}

type FieldRules_String_ struct {
	String_ *FieldRulesString `protobuf:"bytes,15,opt,name=string,oneof"`
}

type FieldRules_Bytes struct {
	Bytes *FieldRulesBytes `protobuf:"bytes,16,opt,name=bytes,oneof"`
}

type FieldRules_Message struct {
	Message *FieldRulesMessage `protobuf:"bytes,17,opt,name=message,oneof"`
}

func (*FieldRules_Bool) isFieldRules_Type() {}

func (*FieldRules_Enum) isFieldRules_Type() {}

func (*FieldRules_Int32) isFieldRules_Type() {}

func (*FieldRules_Uint32) isFieldRules_Type() {}

func (*FieldRules_Int64) isFieldRules_Type() {}

func (*FieldRules_Uint64) isFieldRules_Type() {}

func (*FieldRules_Float) isFieldRules_Type() {}

func (*FieldRules_Double) isFieldRules_Type() {}

func (*FieldRules_String_) isFieldRules_Type() {}

func (*FieldRules_Bytes) isFieldRules_Type() {}

func (*FieldRules_Message) isFieldRules_Type() {}

type FieldRulesBool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eq *bool `protobuf:"varint,1,opt,name=eq" json:"eq,omitempty"`
}

func (x *FieldRulesBool) Reset() {
	*x = FieldRulesBool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validator_validator_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldRulesBool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldRulesBool) ProtoMessage() {}

func (x *FieldRulesBool) ProtoReflect() protoreflect.Message {
	mi := &file_validator_validator_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldRulesBool.ProtoReflect.Descriptor instead.
func (*FieldRulesBool) Descriptor() ([]byte, []int) {
	return file_validator_validator_proto_rawDescGZIP(), []int{2}
}

func (x *FieldRulesBool) GetEq() bool {
	if x != nil && x.Eq != nil {
		return *x.Eq
	}
	return false
}

type FieldRulesEnum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eq      *int32  `protobuf:"varint,1,opt,name=eq" json:"eq,omitempty"`
	Ne      *int32  `protobuf:"varint,2,opt,name=ne" json:"ne,omitempty"`
	Lt      *int32  `protobuf:"varint,3,opt,name=lt" json:"lt,omitempty"`
	Gt      *int32  `protobuf:"varint,4,opt,name=gt" json:"gt,omitempty"`
	Le      *int32  `protobuf:"varint,5,opt,name=le" json:"le,omitempty"`
	Ge      *int32  `protobuf:"varint,6,opt,name=ge" json:"ge,omitempty"`
	In      []int32 `protobuf:"varint,7,rep,name=in" json:"in,omitempty"`
	NotIn   []int32 `protobuf:"varint,8,rep,name=not_in,json=notIn" json:"not_in,omitempty"`
	Defined *bool   `protobuf:"varint,9,opt,name=defined" json:"defined,omitempty"` // Enum value must be defined. Take no effect when `in` is not empty.
}

func (x *FieldRulesEnum) Reset() {
	*x = FieldRulesEnum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validator_validator_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldRulesEnum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldRulesEnum) ProtoMessage() {}

func (x *FieldRulesEnum) ProtoReflect() protoreflect.Message {
	mi := &file_validator_validator_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldRulesEnum.ProtoReflect.Descriptor instead.
func (*FieldRulesEnum) Descriptor() ([]byte, []int) {
	return file_validator_validator_proto_rawDescGZIP(), []int{3}
}

func (x *FieldRulesEnum) GetEq() int32 {
	if x != nil && x.Eq != nil {
		return *x.Eq
	}
	return 0
}

func (x *FieldRulesEnum) GetNe() int32 {
	if x != nil && x.Ne != nil {
		return *x.Ne
	}
	return 0
}

func (x *FieldRulesEnum) GetLt() int32 {
	if x != nil && x.Lt != nil {
		return *x.Lt
	}
	return 0
}

func (x *FieldRulesEnum) GetGt() int32 {
	if x != nil && x.Gt != nil {
		return *x.Gt
	}
	return 0
}

func (x *FieldRulesEnum) GetLe() int32 {
	if x != nil && x.Le != nil {
		return *x.Le
	}
	return 0
}

func (x *FieldRulesEnum) GetGe() int32 {
	if x != nil && x.Ge != nil {
		return *x.Ge
	}
	return 0
}

func (x *FieldRulesEnum) GetIn() []int32 {
	if x != nil {
		return x.In
	}
	return nil
}

func (x *FieldRulesEnum) GetNotIn() []int32 {
	if x != nil {
		return x.NotIn
	}
	return nil
}

func (x *FieldRulesEnum) GetDefined() bool {
	if x != nil && x.Defined != nil {
		return *x.Defined
	}
	return false
}

type FieldRulesInt32 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eq    *int32  `protobuf:"varint,1,opt,name=eq" json:"eq,omitempty"`
	Ne    *int32  `protobuf:"varint,2,opt,name=ne" json:"ne,omitempty"`
	Lt    *int32  `protobuf:"varint,3,opt,name=lt" json:"lt,omitempty"`
	Gt    *int32  `protobuf:"varint,4,opt,name=gt" json:"gt,omitempty"`
	Le    *int32  `protobuf:"varint,5,opt,name=le" json:"le,omitempty"`
	Ge    *int32  `protobuf:"varint,6,opt,name=ge" json:"ge,omitempty"`
	In    []int32 `protobuf:"varint,7,rep,name=in" json:"in,omitempty"`
	NotIn []int32 `protobuf:"varint,8,rep,name=not_in,json=notIn" json:"not_in,omitempty"`
}

func (x *FieldRulesInt32) Reset() {
	*x = FieldRulesInt32{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validator_validator_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldRulesInt32) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldRulesInt32) ProtoMessage() {}

func (x *FieldRulesInt32) ProtoReflect() protoreflect.Message {
	mi := &file_validator_validator_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldRulesInt32.ProtoReflect.Descriptor instead.
func (*FieldRulesInt32) Descriptor() ([]byte, []int) {
	return file_validator_validator_proto_rawDescGZIP(), []int{4}
}

func (x *FieldRulesInt32) GetEq() int32 {
	if x != nil && x.Eq != nil {
		return *x.Eq
	}
	return 0
}

func (x *FieldRulesInt32) GetNe() int32 {
	if x != nil && x.Ne != nil {
		return *x.Ne
	}
	return 0
}

func (x *FieldRulesInt32) GetLt() int32 {
	if x != nil && x.Lt != nil {
		return *x.Lt
	}
	return 0
}

func (x *FieldRulesInt32) GetGt() int32 {
	if x != nil && x.Gt != nil {
		return *x.Gt
	}
	return 0
}

func (x *FieldRulesInt32) GetLe() int32 {
	if x != nil && x.Le != nil {
		return *x.Le
	}
	return 0
}

func (x *FieldRulesInt32) GetGe() int32 {
	if x != nil && x.Ge != nil {
		return *x.Ge
	}
	return 0
}

func (x *FieldRulesInt32) GetIn() []int32 {
	if x != nil {
		return x.In
	}
	return nil
}

func (x *FieldRulesInt32) GetNotIn() []int32 {
	if x != nil {
		return x.NotIn
	}
	return nil
}

type FieldRulesUint32 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eq    *uint32  `protobuf:"varint,1,opt,name=eq" json:"eq,omitempty"`
	Ne    *uint32  `protobuf:"varint,2,opt,name=ne" json:"ne,omitempty"`
	Lt    *uint32  `protobuf:"varint,3,opt,name=lt" json:"lt,omitempty"`
	Gt    *uint32  `protobuf:"varint,4,opt,name=gt" json:"gt,omitempty"`
	Le    *uint32  `protobuf:"varint,5,opt,name=le" json:"le,omitempty"`
	Ge    *uint32  `protobuf:"varint,6,opt,name=ge" json:"ge,omitempty"`
	In    []uint32 `protobuf:"varint,7,rep,name=in" json:"in,omitempty"`
	NotIn []uint32 `protobuf:"varint,8,rep,name=not_in,json=notIn" json:"not_in,omitempty"`
}

func (x *FieldRulesUint32) Reset() {
	*x = FieldRulesUint32{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validator_validator_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldRulesUint32) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldRulesUint32) ProtoMessage() {}

func (x *FieldRulesUint32) ProtoReflect() protoreflect.Message {
	mi := &file_validator_validator_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldRulesUint32.ProtoReflect.Descriptor instead.
func (*FieldRulesUint32) Descriptor() ([]byte, []int) {
	return file_validator_validator_proto_rawDescGZIP(), []int{5}
}

func (x *FieldRulesUint32) GetEq() uint32 {
	if x != nil && x.Eq != nil {
		return *x.Eq
	}
	return 0
}

func (x *FieldRulesUint32) GetNe() uint32 {
	if x != nil && x.Ne != nil {
		return *x.Ne
	}
	return 0
}

func (x *FieldRulesUint32) GetLt() uint32 {
	if x != nil && x.Lt != nil {
		return *x.Lt
	}
	return 0
}

func (x *FieldRulesUint32) GetGt() uint32 {
	if x != nil && x.Gt != nil {
		return *x.Gt
	}
	return 0
}

func (x *FieldRulesUint32) GetLe() uint32 {
	if x != nil && x.Le != nil {
		return *x.Le
	}
	return 0
}

func (x *FieldRulesUint32) GetGe() uint32 {
	if x != nil && x.Ge != nil {
		return *x.Ge
	}
	return 0
}

func (x *FieldRulesUint32) GetIn() []uint32 {
	if x != nil {
		return x.In
	}
	return nil
}

func (x *FieldRulesUint32) GetNotIn() []uint32 {
	if x != nil {
		return x.NotIn
	}
	return nil
}

type FieldRulesInt64 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eq    *int64  `protobuf:"varint,1,opt,name=eq" json:"eq,omitempty"`
	Ne    *int64  `protobuf:"varint,2,opt,name=ne" json:"ne,omitempty"`
	Lt    *int64  `protobuf:"varint,3,opt,name=lt" json:"lt,omitempty"`
	Gt    *int64  `protobuf:"varint,4,opt,name=gt" json:"gt,omitempty"`
	Le    *int64  `protobuf:"varint,5,opt,name=le" json:"le,omitempty"`
	Ge    *int64  `protobuf:"varint,6,opt,name=ge" json:"ge,omitempty"`
	In    []int64 `protobuf:"varint,7,rep,name=in" json:"in,omitempty"`
	NotIn []int64 `protobuf:"varint,8,rep,name=not_in,json=notIn" json:"not_in,omitempty"`
}

func (x *FieldRulesInt64) Reset() {
	*x = FieldRulesInt64{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validator_validator_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldRulesInt64) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldRulesInt64) ProtoMessage() {}

func (x *FieldRulesInt64) ProtoReflect() protoreflect.Message {
	mi := &file_validator_validator_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldRulesInt64.ProtoReflect.Descriptor instead.
func (*FieldRulesInt64) Descriptor() ([]byte, []int) {
	return file_validator_validator_proto_rawDescGZIP(), []int{6}
}

func (x *FieldRulesInt64) GetEq() int64 {
	if x != nil && x.Eq != nil {
		return *x.Eq
	}
	return 0
}

func (x *FieldRulesInt64) GetNe() int64 {
	if x != nil && x.Ne != nil {
		return *x.Ne
	}
	return 0
}

func (x *FieldRulesInt64) GetLt() int64 {
	if x != nil && x.Lt != nil {
		return *x.Lt
	}
	return 0
}

func (x *FieldRulesInt64) GetGt() int64 {
	if x != nil && x.Gt != nil {
		return *x.Gt
	}
	return 0
}

func (x *FieldRulesInt64) GetLe() int64 {
	if x != nil && x.Le != nil {
		return *x.Le
	}
	return 0
}

func (x *FieldRulesInt64) GetGe() int64 {
	if x != nil && x.Ge != nil {
		return *x.Ge
	}
	return 0
}

func (x *FieldRulesInt64) GetIn() []int64 {
	if x != nil {
		return x.In
	}
	return nil
}

func (x *FieldRulesInt64) GetNotIn() []int64 {
	if x != nil {
		return x.NotIn
	}
	return nil
}

type FieldRulesUint64 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eq    *uint64  `protobuf:"varint,1,opt,name=eq" json:"eq,omitempty"`
	Ne    *uint64  `protobuf:"varint,2,opt,name=ne" json:"ne,omitempty"`
	Lt    *uint64  `protobuf:"varint,3,opt,name=lt" json:"lt,omitempty"`
	Gt    *uint64  `protobuf:"varint,4,opt,name=gt" json:"gt,omitempty"`
	Le    *uint64  `protobuf:"varint,5,opt,name=le" json:"le,omitempty"`
	Ge    *uint64  `protobuf:"varint,6,opt,name=ge" json:"ge,omitempty"`
	In    []uint64 `protobuf:"varint,7,rep,name=in" json:"in,omitempty"`
	NotIn []uint64 `protobuf:"varint,8,rep,name=not_in,json=notIn" json:"not_in,omitempty"`
}

func (x *FieldRulesUint64) Reset() {
	*x = FieldRulesUint64{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validator_validator_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldRulesUint64) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldRulesUint64) ProtoMessage() {}

func (x *FieldRulesUint64) ProtoReflect() protoreflect.Message {
	mi := &file_validator_validator_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldRulesUint64.ProtoReflect.Descriptor instead.
func (*FieldRulesUint64) Descriptor() ([]byte, []int) {
	return file_validator_validator_proto_rawDescGZIP(), []int{7}
}

func (x *FieldRulesUint64) GetEq() uint64 {
	if x != nil && x.Eq != nil {
		return *x.Eq
	}
	return 0
}

func (x *FieldRulesUint64) GetNe() uint64 {
	if x != nil && x.Ne != nil {
		return *x.Ne
	}
	return 0
}

func (x *FieldRulesUint64) GetLt() uint64 {
	if x != nil && x.Lt != nil {
		return *x.Lt
	}
	return 0
}

func (x *FieldRulesUint64) GetGt() uint64 {
	if x != nil && x.Gt != nil {
		return *x.Gt
	}
	return 0
}

func (x *FieldRulesUint64) GetLe() uint64 {
	if x != nil && x.Le != nil {
		return *x.Le
	}
	return 0
}

func (x *FieldRulesUint64) GetGe() uint64 {
	if x != nil && x.Ge != nil {
		return *x.Ge
	}
	return 0
}

func (x *FieldRulesUint64) GetIn() []uint64 {
	if x != nil {
		return x.In
	}
	return nil
}

func (x *FieldRulesUint64) GetNotIn() []uint64 {
	if x != nil {
		return x.NotIn
	}
	return nil
}

type FieldRulesFloat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eq    *float32  `protobuf:"fixed32,1,opt,name=eq" json:"eq,omitempty"`
	Ne    *float32  `protobuf:"fixed32,2,opt,name=ne" json:"ne,omitempty"`
	Lt    *float32  `protobuf:"fixed32,3,opt,name=lt" json:"lt,omitempty"`
	Gt    *float32  `protobuf:"fixed32,4,opt,name=gt" json:"gt,omitempty"`
	Le    *float32  `protobuf:"fixed32,5,opt,name=le" json:"le,omitempty"`
	Ge    *float32  `protobuf:"fixed32,6,opt,name=ge" json:"ge,omitempty"`
	In    []float32 `protobuf:"fixed32,7,rep,name=in" json:"in,omitempty"`
	NotIn []float32 `protobuf:"fixed32,8,rep,name=not_in,json=notIn" json:"not_in,omitempty"`
}

func (x *FieldRulesFloat) Reset() {
	*x = FieldRulesFloat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validator_validator_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldRulesFloat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldRulesFloat) ProtoMessage() {}

func (x *FieldRulesFloat) ProtoReflect() protoreflect.Message {
	mi := &file_validator_validator_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldRulesFloat.ProtoReflect.Descriptor instead.
func (*FieldRulesFloat) Descriptor() ([]byte, []int) {
	return file_validator_validator_proto_rawDescGZIP(), []int{8}
}

func (x *FieldRulesFloat) GetEq() float32 {
	if x != nil && x.Eq != nil {
		return *x.Eq
	}
	return 0
}

func (x *FieldRulesFloat) GetNe() float32 {
	if x != nil && x.Ne != nil {
		return *x.Ne
	}
	return 0
}

func (x *FieldRulesFloat) GetLt() float32 {
	if x != nil && x.Lt != nil {
		return *x.Lt
	}
	return 0
}

func (x *FieldRulesFloat) GetGt() float32 {
	if x != nil && x.Gt != nil {
		return *x.Gt
	}
	return 0
}

func (x *FieldRulesFloat) GetLe() float32 {
	if x != nil && x.Le != nil {
		return *x.Le
	}
	return 0
}

func (x *FieldRulesFloat) GetGe() float32 {
	if x != nil && x.Ge != nil {
		return *x.Ge
	}
	return 0
}

func (x *FieldRulesFloat) GetIn() []float32 {
	if x != nil {
		return x.In
	}
	return nil
}

func (x *FieldRulesFloat) GetNotIn() []float32 {
	if x != nil {
		return x.NotIn
	}
	return nil
}

type FieldRulesDouble struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eq    *float64  `protobuf:"fixed64,1,opt,name=eq" json:"eq,omitempty"`
	Ne    *float64  `protobuf:"fixed64,2,opt,name=ne" json:"ne,omitempty"`
	Lt    *float64  `protobuf:"fixed64,3,opt,name=lt" json:"lt,omitempty"`
	Gt    *float64  `protobuf:"fixed64,4,opt,name=gt" json:"gt,omitempty"`
	Le    *float64  `protobuf:"fixed64,5,opt,name=le" json:"le,omitempty"`
	Ge    *float64  `protobuf:"fixed64,6,opt,name=ge" json:"ge,omitempty"`
	In    []float64 `protobuf:"fixed64,7,rep,name=in" json:"in,omitempty"`
	NotIn []float64 `protobuf:"fixed64,8,rep,name=not_in,json=notIn" json:"not_in,omitempty"`
}

func (x *FieldRulesDouble) Reset() {
	*x = FieldRulesDouble{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validator_validator_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldRulesDouble) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldRulesDouble) ProtoMessage() {}

func (x *FieldRulesDouble) ProtoReflect() protoreflect.Message {
	mi := &file_validator_validator_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldRulesDouble.ProtoReflect.Descriptor instead.
func (*FieldRulesDouble) Descriptor() ([]byte, []int) {
	return file_validator_validator_proto_rawDescGZIP(), []int{9}
}

func (x *FieldRulesDouble) GetEq() float64 {
	if x != nil && x.Eq != nil {
		return *x.Eq
	}
	return 0
}

func (x *FieldRulesDouble) GetNe() float64 {
	if x != nil && x.Ne != nil {
		return *x.Ne
	}
	return 0
}

func (x *FieldRulesDouble) GetLt() float64 {
	if x != nil && x.Lt != nil {
		return *x.Lt
	}
	return 0
}

func (x *FieldRulesDouble) GetGt() float64 {
	if x != nil && x.Gt != nil {
		return *x.Gt
	}
	return 0
}

func (x *FieldRulesDouble) GetLe() float64 {
	if x != nil && x.Le != nil {
		return *x.Le
	}
	return 0
}

func (x *FieldRulesDouble) GetGe() float64 {
	if x != nil && x.Ge != nil {
		return *x.Ge
	}
	return 0
}

func (x *FieldRulesDouble) GetIn() []float64 {
	if x != nil {
		return x.In
	}
	return nil
}

func (x *FieldRulesDouble) GetNotIn() []float64 {
	if x != nil {
		return x.NotIn
	}
	return nil
}

type FieldRulesString struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eq    *uint64  `protobuf:"varint,1,opt,name=eq" json:"eq,omitempty"`
	Ne    *uint64  `protobuf:"varint,2,opt,name=ne" json:"ne,omitempty"`
	Lt    *uint64  `protobuf:"varint,3,opt,name=lt" json:"lt,omitempty"`
	Gt    *uint64  `protobuf:"varint,4,opt,name=gt" json:"gt,omitempty"`
	Le    *uint64  `protobuf:"varint,5,opt,name=le" json:"le,omitempty"`
	Ge    *uint64  `protobuf:"varint,6,opt,name=ge" json:"ge,omitempty"`
	In    []string `protobuf:"bytes,7,rep,name=in" json:"in,omitempty"`
	NotIn []string `protobuf:"bytes,8,rep,name=not_in,json=notIn" json:"not_in,omitempty"`
}

func (x *FieldRulesString) Reset() {
	*x = FieldRulesString{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validator_validator_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldRulesString) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldRulesString) ProtoMessage() {}

func (x *FieldRulesString) ProtoReflect() protoreflect.Message {
	mi := &file_validator_validator_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldRulesString.ProtoReflect.Descriptor instead.
func (*FieldRulesString) Descriptor() ([]byte, []int) {
	return file_validator_validator_proto_rawDescGZIP(), []int{10}
}

func (x *FieldRulesString) GetEq() uint64 {
	if x != nil && x.Eq != nil {
		return *x.Eq
	}
	return 0
}

func (x *FieldRulesString) GetNe() uint64 {
	if x != nil && x.Ne != nil {
		return *x.Ne
	}
	return 0
}

func (x *FieldRulesString) GetLt() uint64 {
	if x != nil && x.Lt != nil {
		return *x.Lt
	}
	return 0
}

func (x *FieldRulesString) GetGt() uint64 {
	if x != nil && x.Gt != nil {
		return *x.Gt
	}
	return 0
}

func (x *FieldRulesString) GetLe() uint64 {
	if x != nil && x.Le != nil {
		return *x.Le
	}
	return 0
}

func (x *FieldRulesString) GetGe() uint64 {
	if x != nil && x.Ge != nil {
		return *x.Ge
	}
	return 0
}

func (x *FieldRulesString) GetIn() []string {
	if x != nil {
		return x.In
	}
	return nil
}

func (x *FieldRulesString) GetNotIn() []string {
	if x != nil {
		return x.NotIn
	}
	return nil
}

type FieldRulesBytes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eq *uint64 `protobuf:"varint,1,opt,name=eq" json:"eq,omitempty"`
	Ne *uint64 `protobuf:"varint,2,opt,name=ne" json:"ne,omitempty"`
	Lt *uint64 `protobuf:"varint,3,opt,name=lt" json:"lt,omitempty"`
	Gt *uint64 `protobuf:"varint,4,opt,name=gt" json:"gt,omitempty"`
	Le *uint64 `protobuf:"varint,5,opt,name=le" json:"le,omitempty"`
	Ge *uint64 `protobuf:"varint,6,opt,name=ge" json:"ge,omitempty"`
}

func (x *FieldRulesBytes) Reset() {
	*x = FieldRulesBytes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validator_validator_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldRulesBytes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldRulesBytes) ProtoMessage() {}

func (x *FieldRulesBytes) ProtoReflect() protoreflect.Message {
	mi := &file_validator_validator_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldRulesBytes.ProtoReflect.Descriptor instead.
func (*FieldRulesBytes) Descriptor() ([]byte, []int) {
	return file_validator_validator_proto_rawDescGZIP(), []int{11}
}

func (x *FieldRulesBytes) GetEq() uint64 {
	if x != nil && x.Eq != nil {
		return *x.Eq
	}
	return 0
}

func (x *FieldRulesBytes) GetNe() uint64 {
	if x != nil && x.Ne != nil {
		return *x.Ne
	}
	return 0
}

func (x *FieldRulesBytes) GetLt() uint64 {
	if x != nil && x.Lt != nil {
		return *x.Lt
	}
	return 0
}

func (x *FieldRulesBytes) GetGt() uint64 {
	if x != nil && x.Gt != nil {
		return *x.Gt
	}
	return 0
}

func (x *FieldRulesBytes) GetLe() uint64 {
	if x != nil && x.Le != nil {
		return *x.Le
	}
	return 0
}

func (x *FieldRulesBytes) GetGe() uint64 {
	if x != nil && x.Ge != nil {
		return *x.Ge
	}
	return 0
}

type FieldRulesMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FieldRulesMessage) Reset() {
	*x = FieldRulesMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validator_validator_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldRulesMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldRulesMessage) ProtoMessage() {}

func (x *FieldRulesMessage) ProtoReflect() protoreflect.Message {
	mi := &file_validator_validator_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldRulesMessage.ProtoReflect.Descriptor instead.
func (*FieldRulesMessage) Descriptor() ([]byte, []int) {
	return file_validator_validator_proto_rawDescGZIP(), []int{12}
}

type FieldRulesRepeated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eq      *uint64 `protobuf:"varint,1,opt,name=eq" json:"eq,omitempty"`
	Ne      *uint64 `protobuf:"varint,2,opt,name=ne" json:"ne,omitempty"`
	Lt      *uint64 `protobuf:"varint,3,opt,name=lt" json:"lt,omitempty"`
	Gt      *uint64 `protobuf:"varint,4,opt,name=gt" json:"gt,omitempty"`
	Le      *uint64 `protobuf:"varint,5,opt,name=le" json:"le,omitempty"`
	Ge      *uint64 `protobuf:"varint,6,opt,name=ge" json:"ge,omitempty"`
	SkipNil *bool   `protobuf:"varint,7,opt,name=skip_nil,json=skipNil" json:"skip_nil,omitempty"` // Skip nil item.
}

func (x *FieldRulesRepeated) Reset() {
	*x = FieldRulesRepeated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validator_validator_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldRulesRepeated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldRulesRepeated) ProtoMessage() {}

func (x *FieldRulesRepeated) ProtoReflect() protoreflect.Message {
	mi := &file_validator_validator_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldRulesRepeated.ProtoReflect.Descriptor instead.
func (*FieldRulesRepeated) Descriptor() ([]byte, []int) {
	return file_validator_validator_proto_rawDescGZIP(), []int{13}
}

func (x *FieldRulesRepeated) GetEq() uint64 {
	if x != nil && x.Eq != nil {
		return *x.Eq
	}
	return 0
}

func (x *FieldRulesRepeated) GetNe() uint64 {
	if x != nil && x.Ne != nil {
		return *x.Ne
	}
	return 0
}

func (x *FieldRulesRepeated) GetLt() uint64 {
	if x != nil && x.Lt != nil {
		return *x.Lt
	}
	return 0
}

func (x *FieldRulesRepeated) GetGt() uint64 {
	if x != nil && x.Gt != nil {
		return *x.Gt
	}
	return 0
}

func (x *FieldRulesRepeated) GetLe() uint64 {
	if x != nil && x.Le != nil {
		return *x.Le
	}
	return 0
}

func (x *FieldRulesRepeated) GetGe() uint64 {
	if x != nil && x.Ge != nil {
		return *x.Ge
	}
	return 0
}

func (x *FieldRulesRepeated) GetSkipNil() bool {
	if x != nil && x.SkipNil != nil {
		return *x.SkipNil
	}
	return false
}

var file_validator_validator_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.FileOptions)(nil),
		ExtensionType: (*FileOptions)(nil),
		Field:         1331,
		Name:          "validator.fileOptions",
		Tag:           "bytes,1331,opt,name=fileOptions",
		Filename:      "validator/validator.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*FieldRules)(nil),
		Field:         1331,
		Name:          "validator.rules",
		Tag:           "bytes,1331,opt,name=rules",
		Filename:      "validator/validator.proto",
	},
}

// Extension fields to descriptorpb.FileOptions.
var (
	// optional validator.FileOptions fileOptions = 1331;
	E_FileOptions = &file_validator_validator_proto_extTypes[0] // Extension number not registered yet.
)

// Extension fields to descriptorpb.FieldOptions.
var (
	// optional validator.FieldRules rules = 1331;
	E_Rules = &file_validator_validator_proto_extTypes[1] // Extension number not registered yet.
)

var File_validator_validator_proto protoreflect.FileDescriptor

var file_validator_validator_proto_rawDesc = []byte{
	0x0a, 0x19, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3d, 0x0a, 0x0b, 0x46, 0x69, 0x6c, 0x65,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x22, 0x97, 0x05, 0x0a, 0x0a, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x42, 0x6f, 0x6f, 0x6c, 0x48,
	0x00, 0x52, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x12, 0x2f, 0x0a, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x75, 0x6d,
	0x48, 0x00, 0x52, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x12, 0x32, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x35, 0x0a, 0x06,
	0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x48, 0x00, 0x52, 0x06, 0x75, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x12, 0x32, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x48, 0x00,
	0x52, 0x05, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x35, 0x0a, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x55, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x48, 0x00, 0x52, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x32,
	0x0a, 0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x48, 0x00, 0x52, 0x05, 0x66, 0x6c, 0x6f,
	0x61, 0x74, 0x12, 0x35, 0x0a, 0x06, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x48,
	0x00, 0x52, 0x06, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x12, 0x32, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x42, 0x79, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x05, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x39,
	0x0a, 0x08, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x52,
	0x08, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x22, 0x20, 0x0a, 0x0e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x42,
	0x6f, 0x6f, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x02, 0x65, 0x71, 0x22, 0xb1, 0x01, 0x0a, 0x0e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x6e, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x6c, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x67, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x67, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x49, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x22, 0x98, 0x01, 0x0a, 0x0f, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x0e, 0x0a, 0x02, 0x65,
	0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x6e,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x6e, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6c,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x6c, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x67,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x67, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x6c,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x67,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x05, 0x52, 0x02, 0x69, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x6e,
	0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x6e, 0x6f, 0x74,
	0x49, 0x6e, 0x22, 0x99, 0x01, 0x0a, 0x10, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x0e, 0x0a, 0x02, 0x65, 0x71, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x02, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x6e, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x02, 0x6e, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6c, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x02, 0x6c, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x67, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x02, 0x67, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x6c, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x02, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x67, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x02, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x6e, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x6e, 0x6f, 0x74, 0x5f, 0x69,
	0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x49, 0x6e, 0x22, 0x98,
	0x01, 0x0a, 0x0f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x12, 0x0e, 0x0a, 0x02, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x6e, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x6c, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x67, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x67, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x49, 0x6e, 0x22, 0x99, 0x01, 0x0a, 0x10, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x0e,
	0x0a, 0x02, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x65, 0x71, 0x12, 0x0e,
	0x0a, 0x02, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x6e, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x6c, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x67, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x67, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x6c, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x67, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x04, 0x52, 0x02, 0x69, 0x6e, 0x12, 0x15,
	0x0a, 0x06, 0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x04, 0x52, 0x05,
	0x6e, 0x6f, 0x74, 0x49, 0x6e, 0x22, 0x98, 0x01, 0x0a, 0x0f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x65, 0x71, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x02, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x6e, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x02, 0x6e, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6c, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x02, 0x6c, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x67, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x02, 0x67, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x6c, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x02, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x67, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x02, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x6e, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x02, 0x52, 0x02, 0x69, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x6e, 0x6f, 0x74,
	0x5f, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x02, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x49, 0x6e,
	0x22, 0x99, 0x01, 0x0a, 0x10, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x44,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x02, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x02, 0x6e, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x02, 0x6c, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x67, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x02, 0x67, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x02, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x02, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x01, 0x52, 0x02, 0x69, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x01, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x49, 0x6e, 0x22, 0x99, 0x01, 0x0a,
	0x10, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x12, 0x0e, 0x0a, 0x02, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x65,
	0x71, 0x12, 0x0e, 0x0a, 0x02, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x6e,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x6c,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x67, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x67,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x6c,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x67,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x6e, 0x12, 0x15, 0x0a, 0x06, 0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x49, 0x6e, 0x22, 0x71, 0x0a, 0x0f, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x65,
	0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x6e,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x6e, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6c,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x6c, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x67,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x67, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x6c,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x67,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x67, 0x65, 0x22, 0x13, 0x0a, 0x11, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x8f, 0x01, 0x0a, 0x12, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x65, 0x71, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x6e, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x6e, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6c, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x6c, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x67, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x67, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x6c, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x67, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x6b, 0x69, 0x70, 0x5f,
	0x6e, 0x69, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x70, 0x4e,
	0x69, 0x6c, 0x3a, 0x57, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0xb3, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b,
	0x66, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x4b, 0x0a, 0x05, 0x72,
	0x75, 0x6c, 0x65, 0x73, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0xb3, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x42, 0x29, 0x5a, 0x27, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x75, 0x61, 0x64, 0x65, 0x72, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x62, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72,
}

var (
	file_validator_validator_proto_rawDescOnce sync.Once
	file_validator_validator_proto_rawDescData = file_validator_validator_proto_rawDesc
)

func file_validator_validator_proto_rawDescGZIP() []byte {
	file_validator_validator_proto_rawDescOnce.Do(func() {
		file_validator_validator_proto_rawDescData = protoimpl.X.CompressGZIP(file_validator_validator_proto_rawDescData)
	})
	return file_validator_validator_proto_rawDescData
}

var file_validator_validator_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_validator_validator_proto_goTypes = []interface{}{
	(*FileOptions)(nil),               // 0: validator.FileOptions
	(*FieldRules)(nil),                // 1: validator.FieldRules
	(*FieldRulesBool)(nil),            // 2: validator.FieldRulesBool
	(*FieldRulesEnum)(nil),            // 3: validator.FieldRulesEnum
	(*FieldRulesInt32)(nil),           // 4: validator.FieldRulesInt32
	(*FieldRulesUint32)(nil),          // 5: validator.FieldRulesUint32
	(*FieldRulesInt64)(nil),           // 6: validator.FieldRulesInt64
	(*FieldRulesUint64)(nil),          // 7: validator.FieldRulesUint64
	(*FieldRulesFloat)(nil),           // 8: validator.FieldRulesFloat
	(*FieldRulesDouble)(nil),          // 9: validator.FieldRulesDouble
	(*FieldRulesString)(nil),          // 10: validator.FieldRulesString
	(*FieldRulesBytes)(nil),           // 11: validator.FieldRulesBytes
	(*FieldRulesMessage)(nil),         // 12: validator.FieldRulesMessage
	(*FieldRulesRepeated)(nil),        // 13: validator.FieldRulesRepeated
	(*descriptorpb.FileOptions)(nil),  // 14: google.protobuf.FileOptions
	(*descriptorpb.FieldOptions)(nil), // 15: google.protobuf.FieldOptions
}
var file_validator_validator_proto_depIdxs = []int32{
	2,  // 0: validator.FieldRules.bool:type_name -> validator.FieldRulesBool
	3,  // 1: validator.FieldRules.enum:type_name -> validator.FieldRulesEnum
	4,  // 2: validator.FieldRules.int32:type_name -> validator.FieldRulesInt32
	5,  // 3: validator.FieldRules.uint32:type_name -> validator.FieldRulesUint32
	6,  // 4: validator.FieldRules.int64:type_name -> validator.FieldRulesInt64
	7,  // 5: validator.FieldRules.uint64:type_name -> validator.FieldRulesUint64
	8,  // 6: validator.FieldRules.float:type_name -> validator.FieldRulesFloat
	9,  // 7: validator.FieldRules.double:type_name -> validator.FieldRulesDouble
	10, // 8: validator.FieldRules.string:type_name -> validator.FieldRulesString
	11, // 9: validator.FieldRules.bytes:type_name -> validator.FieldRulesBytes
	12, // 10: validator.FieldRules.message:type_name -> validator.FieldRulesMessage
	13, // 11: validator.FieldRules.repeated:type_name -> validator.FieldRulesRepeated
	14, // 12: validator.fileOptions:extendee -> google.protobuf.FileOptions
	15, // 13: validator.rules:extendee -> google.protobuf.FieldOptions
	0,  // 14: validator.fileOptions:type_name -> validator.FileOptions
	1,  // 15: validator.rules:type_name -> validator.FieldRules
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	14, // [14:16] is the sub-list for extension type_name
	12, // [12:14] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_validator_validator_proto_init() }
func file_validator_validator_proto_init() {
	if File_validator_validator_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_validator_validator_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validator_validator_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldRules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validator_validator_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldRulesBool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validator_validator_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldRulesEnum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validator_validator_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldRulesInt32); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validator_validator_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldRulesUint32); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validator_validator_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldRulesInt64); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validator_validator_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldRulesUint64); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validator_validator_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldRulesFloat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validator_validator_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldRulesDouble); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validator_validator_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldRulesString); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validator_validator_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldRulesBytes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validator_validator_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldRulesMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validator_validator_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldRulesRepeated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_validator_validator_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*FieldRules_Bool)(nil),
		(*FieldRules_Enum)(nil),
		(*FieldRules_Int32)(nil),
		(*FieldRules_Uint32)(nil),
		(*FieldRules_Int64)(nil),
		(*FieldRules_Uint64)(nil),
		(*FieldRules_Float)(nil),
		(*FieldRules_Double)(nil),
		(*FieldRules_String_)(nil),
		(*FieldRules_Bytes)(nil),
		(*FieldRules_Message)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_validator_validator_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 2,
			NumServices:   0,
		},
		GoTypes:           file_validator_validator_proto_goTypes,
		DependencyIndexes: file_validator_validator_proto_depIdxs,
		MessageInfos:      file_validator_validator_proto_msgTypes,
		ExtensionInfos:    file_validator_validator_proto_extTypes,
	}.Build()
	File_validator_validator_proto = out.File
	file_validator_validator_proto_rawDesc = nil
	file_validator_validator_proto_goTypes = nil
	file_validator_validator_proto_depIdxs = nil
}

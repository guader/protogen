package main

import (
	"flag"
	"strings"

	"github.com/guader/protogen/protoc-gen-go-enum/plugins"
	"github.com/guader/protogen/version"
	"google.golang.org/protobuf/compiler/protogen"
)

const (
	pluginErr        = "err"
	pluginGrpcStatus = "grpcStatus"
	pluginNumber     = "number"
	pluginValidation = "validation"
)

var (
	flags       flag.FlagSet
	flagPlugins string
	flagEnums   string
)

type generator interface {
	Generate(*protogen.GeneratedFile, []*protogen.Enum) error
	GeneratedFilenameSuffix() string
}

func main() {
	flags.StringVar(&flagPlugins, "plugins", "", "plugins for code generation, example: err+number, available: err, grpcStatus, number, validation.")
	flags.StringVar(&flagEnums, "enums", "", "generate code for enums of specified names, for all if not specified. example: A+B, generate code for enum A and B.")
	protogen.Options{ParamFunc: flags.Set}.Run(generate)
}

func generate(plugin *protogen.Plugin) error {
	var specifiedGenerators []generator
	for _, s := range strings.Split(flagPlugins, "+") {
		switch s {
		case pluginErr:
			specifiedGenerators = append(specifiedGenerators, &plugins.Err{})
		case pluginGrpcStatus:
			specifiedGenerators = append(specifiedGenerators, &plugins.GrpcStatus{})
		case pluginNumber:
			specifiedGenerators = append(specifiedGenerators, &plugins.Number{})
		case pluginValidation:
			specifiedGenerators = append(specifiedGenerators, &plugins.Validation{})
		}
	}
	if len(specifiedGenerators) == 0 {
		return nil
	}

	var specifiedEnums map[string]struct{}
	if flagEnums != "" {
		specifiedEnums = make(map[string]struct{})
		for _, s := range strings.Split(flagEnums, "+") {
			specifiedEnums[s] = struct{}{}
		}
	}

	for _, file := range plugin.Files {
		if !file.Generate {
			continue
		}

		var enums []*protogen.Enum
		if flagEnums != "" {
			for _, enum := range file.Enums {
				_, ok := specifiedEnums[string(enum.Desc.Name())]
				if ok {
					enums = append(enums, enum)
				}
			}
		} else {
			enums = file.Enums
		}
		if len(enums) == 0 {
			continue
		}

		for _, gen := range specifiedGenerators {
			g := plugin.NewGeneratedFile(file.GeneratedFilenamePrefix+gen.GeneratedFilenameSuffix(), file.GoImportPath)
			g.P("// Code generated by protoc-gen-go-enum. DO NOT EDIT.")
			g.P("// version: ", version.Version)
			g.P("// source: ", file.Desc.Path())
			g.P()
			g.P("package ", file.GoPackageName)
			g.P()
			if err := gen.Generate(g, enums); err != nil {
				return err
			}
		}
	}
	return nil
}

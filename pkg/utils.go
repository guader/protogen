package pkg

import (
	"fmt"

	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
)

func ProtoGetExtension[T any](m proto.Message, t protoreflect.ExtensionType) *T {
	if !proto.HasExtension(m, t) {
		return nil
	}
	v, ok := proto.GetExtension(m, t).(*T)
	if ok {
		return v
	}
	return nil
}

func RenderPackageComments(version, plugin, source string) string {
	return fmt.Sprintf(`// Code generated by protoc-gen-go-ext. DO NOT EDIT.
// version: %s
// plugin: %s
// source: %s
`, version, plugin, source)
}

// Deprecated: use FieldGoType or FieldGoTypeName instead.
func GoFieldTypeInfo(g *protogen.GeneratedFile, field *protogen.Field) (string, string, bool) {
	var (
		idt     string // identifier
		star    string // pointer
		hasStar bool   // has star
		dft     string // default value of identifier
	)

	if field.Desc.HasPresence() {
		star = "*"
		hasStar = true
	}

	switch field.Desc.Kind() {
	case protoreflect.BoolKind:
		idt = "bool"
		dft = "false"
	case protoreflect.EnumKind:
		idt = g.QualifiedGoIdent(field.Enum.GoIdent)
		dft = idt + "(0)"
	case protoreflect.Int32Kind, protoreflect.Sint32Kind, protoreflect.Sfixed32Kind:
		idt = "int32"
		dft = "0"
	case protoreflect.Uint32Kind, protoreflect.Fixed32Kind:
		idt = "uint32"
		dft = "0"
	case protoreflect.Int64Kind, protoreflect.Sint64Kind, protoreflect.Sfixed64Kind:
		idt = "int64"
		dft = "0"
	case protoreflect.Uint64Kind, protoreflect.Fixed64Kind:
		idt = "uint64"
		dft = "0"
	case protoreflect.FloatKind:
		idt = "float32"
		dft = "0"
	case protoreflect.DoubleKind:
		idt = "float64"
		dft = "0"
	case protoreflect.StringKind:
		idt = "string"
		dft = `""`
	case protoreflect.BytesKind:
		idt = "[]byte"
		star = ""
		hasStar = false
		dft = "nil"
	case protoreflect.MessageKind, protoreflect.GroupKind:
		idt = "*" + g.QualifiedGoIdent(field.Message.GoIdent)
		star = ""
		hasStar = true
		dft = "nil"
	}

	if field.Desc.IsList() {
		return "[]" + idt, "nil", false
	} else if field.Desc.IsMap() {
		k, _, _ := GoFieldTypeInfo(g, field.Message.Fields[0])
		v, _, _ := GoFieldTypeInfo(g, field.Message.Fields[1])
		return fmt.Sprintf(`map[%s]%s`, k, v), "nil", false
	}

	return star + idt, dft, hasStar
}

// https://github.com/protocolbuffers/protobuf-go/blob/v1.31.0/cmd/protoc-gen-go/internal_gengo/main.go#L641
func FieldGoType(g *protogen.GeneratedFile, field *protogen.Field) (goType string, pointer bool) {
	pointer = field.Desc.HasPresence()
	switch field.Desc.Kind() {
	case protoreflect.BoolKind:
		goType = "bool"
	case protoreflect.EnumKind:
		goType = g.QualifiedGoIdent(field.Enum.GoIdent)
	case protoreflect.Int32Kind, protoreflect.Sint32Kind, protoreflect.Sfixed32Kind:
		goType = "int32"
	case protoreflect.Uint32Kind, protoreflect.Fixed32Kind:
		goType = "uint32"
	case protoreflect.Int64Kind, protoreflect.Sint64Kind, protoreflect.Sfixed64Kind:
		goType = "int64"
	case protoreflect.Uint64Kind, protoreflect.Fixed64Kind:
		goType = "uint64"
	case protoreflect.FloatKind:
		goType = "float32"
	case protoreflect.DoubleKind:
		goType = "float64"
	case protoreflect.StringKind:
		goType = "string"
	case protoreflect.BytesKind:
		goType = "[]byte"
		pointer = false // rely on nullability of slices for presence
	case protoreflect.MessageKind, protoreflect.GroupKind:
		goType = "*" + g.QualifiedGoIdent(field.Message.GoIdent)
		pointer = false // pointer captured as part of the type
	}
	switch {
	case field.Desc.IsList():
		return "[]" + goType, false
	case field.Desc.IsMap():
		keyType, _ := FieldGoType(g, field.Message.Fields[0])
		valType, _ := FieldGoType(g, field.Message.Fields[1])
		return fmt.Sprintf("map[%v]%v", keyType, valType), false
	}
	return goType, pointer
}

func FieldGoTypeName(g *protogen.GeneratedFile, field *protogen.Field) string {
	goType, pointer := FieldGoType(g, field)
	var star string
	if pointer {
		star = "*"
	}
	return star + goType
}

func FieldGoTypeNillable(field *protogen.Field) bool {
	return field.Desc.IsList() ||
		field.Desc.IsMap() ||
		field.Desc.Kind() == protoreflect.BytesKind ||
		field.Desc.Kind() == protoreflect.MessageKind ||
		field.Desc.Kind() == protoreflect.GroupKind ||
		field.Desc.HasPresence()
}
